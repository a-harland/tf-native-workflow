name: "Terraform"

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
    secrets:
      GCP_SA_EMAIL:
        required: true
      GCP_SA_KEY:
        required: true
      TF_API_TOKEN:
        required: true
        
jobs:
  terraform:
    name: "Terraform Plan"
    runs-on: ubuntu-18.04
    defaults:
      run:
        shell: bash
        working-directory: ./envs/${{ inputs.env }}
    outputs:
      tf_plan: ${{ steps.output_tfplan.outputs.TF_PLAN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Configure gcloud
        id: config_gcloud
        uses: google-github-actions/setup-gcloud@master
        with:
          version: "latest"
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.10
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false
          
      - uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'
      
      - name: Download Modules
        id: get_modules
        run: rake get_modules env=tst

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
    
      - name: Save Terraform Plan
        id: output_tfplan
        run: |
          terraform plan -no-color -out=tfplan
          terraform show -json tfplan > tfplan.json
          JSON=$(cat ./tfplan.json)
          echo "::set-output name=TF_PLAN::${JSON//'%'/'%25'}"
        continue-on-error: true

      - uses: actions/github-script@v5
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          PLAN_TEXT: "${{ steps.output_tfplan.ouputs.TF_PLAN_TEXT }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `### Terraform Checks for \`${{ inputs.env }}\`
            #### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`\
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  compliance_kms_checks:
    name: "Compliance KMS Checks"
    needs: terraform
    runs-on: ubuntu-18.04
    defaults:
      run:
        shell: bash
        working-directory: ./envs/${{ inputs.env }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: a-harland/tf-native-policies
          path: policy

      - name: Setup Conftest
        uses: artis3n/setup-conftest@v0
        with:
          conftest_version: 0.28.3
          conftest_wrapper: true

      - name: Save TF Plan
        id: save_tf_plan
        run: |
          echo '${{needs.terraform.outputs.tf_plan}}'
          echo '${{needs.terraform.outputs.tf_plan}}' > tfplan.json
      
      - name: Compliance KMS Check
        id: compliance_kms_check
        run: |
          conftest test --parser json --policy ../../policy/kms tfplan.json
        
      - name: Compliance KMS Check Output
        id: compliance_kms_check_output
        uses: actions/github-script@v5
        env: 
          METADATA_CHECK_EXITCODE: "${{ steps.compliance_kms_check.outputs.exitcode }}"
          METADATA_CHECK_ERRORS: "${{ steps.compliance_kms_check.outputs.stdout }}"
        with:
          script: |
            const { METADATA_CHECK_EXITCODE, METADATA_CHECK_ERRORS } = process.env;
            if (METADATA_CHECK_EXITCODE != 0) {
              core.setFailed(METADATA_CHECK_ERRORS);
            }
    
  compliance_metadata_check:
    name: "Compliance Metadata Checks"
    needs: terraform
    runs-on: ubuntu-18.04
    defaults:
      run:
        shell: bash
        working-directory: ./envs/${{ inputs.env }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: a-harland/tf-native-policies
          path: policy

      - name: Setup Conftest
        uses: artis3n/setup-conftest@v0
        with:
          conftest_version: 0.28.3
          conftest_wrapper: true

      - name: Save TF Plan
        id: save_tf_plan
        run: |
          echo '${{needs.terraform.outputs.tf_plan}}'
          echo '${{needs.terraform.outputs.tf_plan}}' > tfplan.json
      
      - name: Compliance Metadata check
        id: compliance_metadata_check
        run: |
          conftest test --parser json --policy ../../policy/metadata tfplan.json
        
      - name: Compliance Metadata Check Output
        id: compliance_metadata_check_output
        uses: actions/github-script@v5
        env: 
          METADATA_CHECK_EXITCODE: "${{ steps.compliance_metadata_check.outputs.exitcode }}"
          METADATA_CHECK_ERRORS: "${{ steps.compliance_metadata_check.outputs.stdout }}"
        with:
          script: |
            const { METADATA_CHECK_EXITCODE, METADATA_CHECK_ERRORS } = process.env;
            if (METADATA_CHECK_EXITCODE != 0) {
              core.setFailed(METADATA_CHECK_ERRORS);
            }

  compliance_iam_check:
    name: "Compliance IAM Checks"
    needs: terraform
    runs-on: ubuntu-18.04
    defaults:
      run:
        shell: bash
        working-directory: ./envs/${{ inputs.env }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: a-harland/tf-native-policies
          path: policy
        
      - name: Setup Conftest
        uses: artis3n/setup-conftest@v0
        with:
          conftest_version: 0.28.3
          conftest_wrapper: true

      - name: Save TF Plan
        id: save_tf_plan
        run: |
          echo '${{needs.terraform.outputs.tf_plan}}' > tfplan.json
      
      - name: Compliance IAM Check
        id: compliance_iam_check
        run: conftest test --parser json --policy ../../policy/iam tfplan.json
        
      - name: Request IAM Approval
        id: compliance_iam_request
        uses: actions/github-script@v5
        if: github.event_name == 'pull_request' && steps.compliance_iam_check.outputs.exitcode != 0
        with:
          script: |         
           const currentReviewers = await github.rest.pulls.listRequestedReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.number }},
           });

           if (currentReviewers.data.users.some(e => e.login === 'asaharland')) {
             console.log("Review already requested from IAM team.");
           } else {
               github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: ${{ github.event.number }},
                reviewers: ["asaharland"]
              });
           }
           
      - name: Check IAM Approval
        id: compliance_iam_check_approval
        if: github.event_name == 'pull_request' && steps.compliance_iam_check.outputs.exitcode != 0
        uses: actions/github-script@v5
        env: 
          SHA: "${{ github.event.pull_request.head.sha }}"
        with:
          script: |
           const { SHA } = process.env;
           const reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.number }},
           });
           if (reviews.data.length > 0) {
             console.log(SHA);
             console.log(reviews);
             if (reviews.data.some(review => 
                  review.user.login === 'asaharland' 
                  && review.commit_id === SHA 
                  && review.state.toUpperCase() === "APPROVED")) {
               console.log("Review approved by IAM team.");
             } else {
               core.setFailed("IAM changes need to be approved by the IAM team.");
             }
           } else {
             core.setFailed("IAM changes need to be reviewed by the IAM team.");
           }

  terraform_apply:
    name: "Terraform Apply"
    needs: [terraform, compliance_iam_check, compliance_metadata_check, compliance_kms_checks]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-18.04
    defaults:
      run:
        shell: bash
        working-directory: ./envs/${{ inputs.env }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Configure gcloud
        id: config_gcloud
        uses: google-github-actions/setup-gcloud@master
        with:
          version: "latest"
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.10
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'
      
      - name: Download Modules
        id: get_modules
        run: rake get_modules env=tst

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -auto-approve
